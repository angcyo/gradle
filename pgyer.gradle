/**
 * 蒲公英 上传脚本
 *
 * 脚本`apply`之后, 会在gradle窗口中的: 工程->Tasks->angcyo 中出现 `_pgyerUpload` 任务. 双击即可运行.
 *
 * https://github.com/angcyo/gradle
 *
 * https://www.pgyer.com/doc/view/app_upload
 * https://www.pgyer.com/doc/view/api#uploadApp
 *
 * Email:angcyo@126.com
 * @author angcyo* @date 2019/08/09
 * Copyright (c) 2019 ShenZhen O&M Cloud Co., Ltd. All rights reserved.
 */

/**
 * 为了保证`Key`的安全:
 * 可以在
 * win: 'C:\Users\用户名\.gradle\gradle.properties'
 * mac: '/Users/用户名/.gradle/gradle.properties'
 * linux: '/root/.gradle/gradle.properties'
 * 文件中加入配置:
 * ```
 * pgyer_api_key=xxx
 * pgyer_user_key=xxx
 * ```
 * 也可以在以下配置.(优先读取`gradle.properties`文件中的配置)
 * */
ext.pgyerConfig = [
        //需要上传的APK,相对路径/绝对路径 (必填)
        "pgyerApkPath"     : "",

        //请求的api地址
        //https://www.pgyer.com/doc/view/api#uploadApp
        "pgyerUrl"         : "https://www.pgyer.com/apiv2/app/upload",

        //官网, 用于拼接短地址 必须/结尾.
        "pgyer"            : "https://www.pgyer.com/",

        "pgyer_api_key"    : "",
        "pgyer_user_key"   : "",

        //如果需要将url转成二维码, 参考以下链接, 注册app_id和app_secret
        //https://github.com/MZCretin/RollToolsApi#%E8%A7%A3%E9%94%81%E6%96%B0%E6%96%B9%E5%BC%8F
        "qr_api_app_id"    : "",
        "qr_api_app_secret": "",
]

//其他参数配置
def paramsConfig = [
        /*//(选填)应用安装方式，值为(1,2,3，默认为1 公开安装)。1：公开安装，2：密码安装，3：邀请安装
        "buildInstallType"      : "1",
        //(选填) 设置App安装密码，密码为空时默认公开安装
        "buildPassword"         : "0000",*/
        //(选填) 版本更新描述，请传空字符串，或不传。 //安装密码:0000
        "buildUpdateDescription": "1.修复已知问题",
        //(选填) 应用名称
        "buildName"             : "",
]

buildscript {
    repositories {
        //alliyun 镜像
        maven() { url 'https://maven.aliyun.com/repository/public' }
        mavenCentral()
    }
    dependencies {
        //https://jcenter.bintray.com/com/squareup/okhttp3/
        classpath "com.squareup.okhttp3:okhttp:4.9.2"
        //https://jcenter.bintray.com/com/google/code/gson/gson/
        classpath "com.google.code.gson:gson:2.8.8"
    }
}

task _pgyerUpload(group: 'angcyo', description: '上传文件到蒲公英') {
    //upload("123.apk")
}

_pgyerUpload.doFirst {

    def api_key = project.hasProperty("pgyer_api_key") ? project.ext.pgyer_api_key : pgyerConfig.pgyer_api_key
    def user_key = project.hasProperty("pgyer_user_key") ? project.ext.pgyer_user_key : pgyerConfig.pgyer_user_key

    def app_id = project.hasProperty("qr_api_app_id") ? project.ext.qr_api_app_id : qiniuConfig.qr_api_app_id
    def app_secret = project.hasProperty("qr_api_app_secret") ? project.ext.qr_api_app_secret : qiniuConfig.qr_api_app_secret
    def codeLogo = project.hasProperty("codeLogo") ? project.ext.codeLogo : null

    def apkPath = project.hasProperty("pgyerApkPath") ? project.ext.pgyerApkPath : pgyerConfig.pgyerApkPath

    if (project.hasProperty("pgyerApkPath")) {
        apkPath = project.ext.pgyerApkPath
    } else {
        apkPath = findApkFile()
    }
    if (apkPath == null || apkPath.isEmpty()) {
        throw new IllegalStateException("请在[gradle.properties]文件中指定需要上传的文件路径[pgyerApkPath=xxx]")
    }

    def allPath = apkPath.split(";")

    allPath.eachWithIndex { path, index ->
        def apkFile = new File(path)
        def fileKey = apkFile.name /*+ new Date().format("_yyyy-MM-dd_HH-mm-ss")*/

        if (!apkFile.exists()) {
            System.err.println("需要上传的文件不存在:" + apkFile.getAbsolutePath())
        } else {
            def clientBuilder = new okhttp3.OkHttpClient.Builder()
            clientBuilder.connectTimeout(10, java.util.concurrent.TimeUnit.SECONDS)
            clientBuilder.readTimeout(60, java.util.concurrent.TimeUnit.SECONDS)

            okhttp3.OkHttpClient client = clientBuilder.build()

            def bodyBuilder = new okhttp3.MultipartBody.Builder()
            bodyBuilder.setType(okhttp3.MultipartBody.FORM)

            bodyBuilder.addFormDataPart("_api_key", new String(api_key))
            bodyBuilder.addFormDataPart("uKey", new String(user_key))
            bodyBuilder.addFormDataPart("file",
                    apkFile.name,
                    okhttp3.RequestBody.create(
                            okhttp3.MediaType.parse("application/vnd.android.package-archive"),
                            apkFile)
            )

            HashMap<String, String> params = paramsConfig
            for (String key : params.keySet()) {
                //println("add part key: " + key + " value: " + params.get(key))
                bodyBuilder.addFormDataPart(key, params.get(key))
            }

            def request = new okhttp3.Request.Builder()
                    .url(pgyerConfig.pgyerUrl)
                    .post(bodyBuilder.build())
                    .build()

            println "上传至蒲公英: ${path} -> ${pgyerConfig.pgyer}"

            def response = client.newCall(request).execute()

            if (response == null || response.body() == null) {
                System.err.println "蒲公英上传结果失败"
                return null
            }
            def json = response.body().string()
            response.close()

            println "蒲公英上传返回:" + json

            def map = new com.google.gson.Gson().fromJson(json, Map.class)
            def data = map.data
            if (data == null) {
                System.err.println "上传${path}失败:" + map.message
            } else {
                def url = pgyerConfig.pgyer + data.buildShortcutUrl
                System.err.println "蒲公英安装地址${path}->" + url

                if (!app_id.isEmpty() && !app_secret.isEmpty()) {

                    if (codeLogo == null || codeLogo.isEmpty()) {
                        codeLogo = getLogoPath(fileKey)
                    }

                    def qrCodeUrl = requestQrCodeUrl(app_id, app_secret, url, codeLogo)

                    System.err.println ''
                    System.err.println "二维码地址->$qrCodeUrl"
                }
            }
        }
    }
}

/**查找apk文件路径*/
def findApkFile() {
    def path = project.hasProperty("apk_path") ? project.ext.apk_path : ".apk"

    def folder = file(path)
    def result = null

    def files = folder.listFiles()
    files?.each {
        if (it.isFile()) {
            if (it.getName().endsWith(".apk")) {
                if (result == null) {
                    result = it.absolutePath
                } else {
                    result = result + ";" + it.absolutePath
                }
            }
        }
    }

    return result
}

/**根据文件名, 获取png目录的logo图片
 * [png/logo.png] 正式包logo
 * [png/logo_test.png] 测试式包logo
 * */
def getLogoPath(apkFileName) {
    def path
    if (apkFileName.contains("apk_release")) {
        path = "png/logo.png"
    } else {
        path = "png/logo_test.png"
    }
    if (file(path).exists()) {
        return path
    }
    return null
}

/**将内容打成二维码图片地址*/
def requestQrCodeUrl(app_id, app_secret, content, logoPath) {
    def request = qrcodeRequest(content, logoPath, app_id, app_secret)

    //生成url对应的二维码
    //https://github.com/MZCretin/RollToolsApi#%E5%85%AB%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81
    def client = new okhttp3.OkHttpClient()
    def json = client.newCall(request).execute().body().string()
    def map = new com.google.gson.Gson().fromJson(json, Map.class)
    println "接口返回:${json}"

    def qrCodeUrl = map["data"]["qrCodeUrl"]
    return qrCodeUrl
}

/**创建一个生成二维码的请求*/
def qrcodeRequest(content, logoPath, app_id, app_secret) {
    def s = URLEncoder.encode(content, "UTF-8")

    def url = ""
    def request = null

    if (logoPath == null || logoPath.isEmpty()) {
        //无logo
        url = "http://www.mxnzp.com/api/qrcode/create/single?content=${s}&size=400&type=0"

        request = new okhttp3.Request.Builder()
                .header("app_id", app_id)
                .header("app_secret", app_secret)
                .url(url)
                .build()
    } else {
        //有logo
        url = "https://www.mxnzp.com/api/qrcode/create/logo?content=${s}&size=400&type=0"

        def logoBody = okhttp3.RequestBody.create(okhttp3.MediaType.parse("multipart/form-data"), file(logoPath))

        okhttp3.RequestBody requestBody = new okhttp3.MultipartBody.Builder()
                .setType(okhttp3.MultipartBody.FORM)
                .addFormDataPart("logo_img", "codeLogo", logoBody)
                .build()

        request = new okhttp3.Request.Builder()
                .post(requestBody)
                .header("app_id", app_id)
                .header("app_secret", app_secret)
                .url(url)
                .build()
    }

    return request
}