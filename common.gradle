/**
 * 导出一些公共的方法
 * 2022-5-21
 * */

/**判断是否是Mac系统*/
static def isMac() {
    //Mac OS X
    def os = System.getProperty("os.name").toLowerCase()
    return os.contains("mac")
}

/**判断是否是Windows系统*/
static def isWindows() {
    //Windows
    def os = System.getProperty("os.name").toLowerCase()
    return os.contains("windows")
}

static def getBuildTime() {
    return new Date().format("yyyy-MM-dd HH:mm:ss.sss", TimeZone.getTimeZone("Asia/Shanghai"))
}

static def osName() {
    return System.getProperty("os.name") + "@" + System.getProperty("os.version")
}

static def userName() {
    return System.getProperty("user.name")
}

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("Asia/Shanghai"))
}

static def apkTime() {
    return new Date().format("yyyy-MM-dd_HH-mm", TimeZone.getTimeZone("Asia/Shanghai"))
}

static def formatTime(String format) {
    return new Date().format(format, TimeZone.getTimeZone("Asia/Shanghai"))
}

static def error(Object msg) {
    System.err.println msg
}

/**查找apk文件路径,
 * [https://docs.groovy-lang.org/latest/html/groovy-jdk/java/io/File.html]
 * [folderPath] 指定要查找的路径
 * */
def findApkFile(String folderPath = null) {
    def path
    if (folderPath == null || folderPath.isEmpty()) {
        path = project.hasProperty("apk_path") ? project.ext.apk_path : ".apk"
    } else {
        path = folderPath
    }

    def folder = file(path)
    def result = null

    def isUploadFile = new File(path, ".upload") //文件是否已经上传过
    if (!isUploadFile.exists()) {
        isUploadFile.createNewFile()
    }
    def uploadFileList = []
    uploadFileList = isUploadFile.readLines('UTF8')

    def files = folder.listFiles()
    files?.each {
        if (it.isFile()) {
            def name = it.getName()
            if (name.endsWith(".apk") || name.endsWith(".ipa")) {
                def line = "${name}/${it.lastModified()}"
                def isUpload = false

                uploadFileList.each {
                    isUpload = isUpload || it == line
                }

                if (isUpload && files.length > 1) {
                    System.out.println '已上传,跳过文件:' + name
                } else {
                    //主动调用[uploadFileSucceed]记录
                    //isUploadFile.append("${line}\n")
                    if (result == null) {
                        result = it.absolutePath
                    } else {
                        result = result + ";" + it.absolutePath
                    }
                }
            }
        }
    }

    return result
}

/**上传文件成功, 写入到文件, 记录一下
 * [filePath] 上传成功的文件路径
 * [folderPath] 日志文件所在的路径
 * */
def uploadFileSucceed(String filePath, String folderPath = null) {
    def targetFile = file(filePath)
    if (!targetFile.exists()) {
        System.err.println("文件不存在,无法记录:${filePath}")
        return
    }

    def path
    if (folderPath == null || folderPath.isEmpty()) {
        path = project.hasProperty("apk_path") ? project.ext.apk_path : ".apk"
    } else {
        path = folderPath
    }

    def isUploadFile = new File(path, ".upload") //文件是否已经上传过
    if (!isUploadFile.exists()) {
        isUploadFile.createNewFile()
    }

    def name = targetFile.getName()
    def line = "${name}/${targetFile.lastModified()}"
    isUploadFile.append("${line}\n")
}

/**根据文件名, 获取png目录的logo图片
 * [png/logo.png] 正式包logo
 * [png/logo_test.png] 测试式包logo
 * */
def getLogoPath(apkFileName) {
    def path
    if (apkFileName.contains("apk_release")) {
        path = "png/logo.png"
    } else {
        path = "png/logo_test.png"
    }
    if (file(path).exists()) {
        return path
    }
    return null
}

/**
 * 复制文件
 * */
static def copyFile(String from, String toPath) {
    InputStream input = null
    OutputStream output = null
    try {
        File source = new File(from)
        if (!source.exists()) {
            return
        }
        File dest = new File(toPath)
        println '[common.gradle] 复制文件:' + source.getAbsolutePath() + " -> " + dest.getAbsolutePath()

        input = new FileInputStream(source)
        output = new FileOutputStream(dest)
        byte[] buf = new byte[1024]
        int bytesRead
        while ((bytesRead = input.read(buf)) != -1) {
            output.write(buf, 0, bytesRead)
        }
        dest.setLastModified(source.lastModified())
    } finally {
        if (input != null) {
            input.close()
        }
        if (output != null) {
            output.close()
        }
    }
}

//获取本机ip, 可能会有多个网卡信息
static def getLocalIp() {
    def ip = ''
    NetworkInterface.getNetworkInterfaces().each {
        if (it.isUp() && !it.isLoopback() && !it.isVirtual()) {
            //Realtek Gaming GbE Family Controller/eth9
            //VMware Virtual Ethernet Adapter for VMnet1/eth8
            def displayName = it.getDisplayName()
            //println displayName + '/' + it.getName()

            displayName = displayName.toLowerCase()
            if (displayName.contains("VMware".toLowerCase()) ||
                    displayName.contains("Virtual".toLowerCase())) {
                //忽略虚拟ip
            } else {
                it.getInetAddresses().each {
                    //192.168.31.192
                    //println it.getHostAddress()
                    if (it.siteLocalAddress) {
                        ip = it.getHostAddress()
                    }
                }
            }
        }
    }
    System.err.println("本机ip:" + ip)
    return ip
}

/**复制apk文件*/
def copyApkFile() {
    def output = project.hasProperty("apk_path") ? project.ext.apk_path : ".apk"
    def apkFolder = new File(project.rootDir.absolutePath + "/" + output)
    def fileList = apkFolder.listFiles()
    for (file in fileList) {
        if (file.isDirectory()) {
            def subFileList = file.listFiles()

            def isCopyFile = new File(file, ".copy") //文件是否已经复制过
            if (!isCopyFile.exists()) {
                isCopyFile.createNewFile()
            }
            def copyFileList = []
            copyFileList = isCopyFile.readLines('UTF8')

            for (subFile in subFileList) {
                def fileName = subFile.name
                if (subFile.isFile() && (fileName.endsWith(".apk") || fileName.endsWith(".aab"))) {
                    def ignoreFile = false

                    def haveCopyFile = false

                    //是否要忽略此文件名
                    copyFileList.each {
                        haveCopyFile = haveCopyFile || it == fileName
                    }

                    ignoreFile = haveCopyFile

                    def targetFile = new File(apkFolder, fileName)
                    if (targetFile.exists() && subFile.lastModified() != targetFile.lastModified()) {
                        //如果目标文件存在, 但是和源文件时间不一样, 则强制需要复制
                        ignoreFile = false
                    }

                    if (!ignoreFile) {
                        //apk文件, 开始复制. 文件不一样的时候才复制
                        copyFile(subFile.absolutePath, targetFile.absolutePath)

                        if (!haveCopyFile) {
                            isCopyFile.append("${fileName}\n") //添加已经复制过的文件名
                        }
                    }
                }
            }
        }
    }
}

//导出
ext {
    isMac = this.&isMac
    isWindows = this.&isWindows
    getBuildTime = this.&getBuildTime
    osName = this.&osName
    userName = this.&userName
    releaseTime = this.&releaseTime
    apkTime = this.&apkTime
    formatTime = this.&formatTime
    error = this.&error
    findApkFile = this.&findApkFile
    uploadFileSucceed = this.&uploadFileSucceed
    copyFile = this.&copyFile
    getLogoPath = this.&getLogoPath
    getLocalIp = this.&getLocalIp
    copyApkFile = this.&copyApkFile
}
