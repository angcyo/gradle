apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'

def C_SDK = 29
def M_SDK = 21
def T_SDK = 29
def V_CODE = 1
def V_NAME = "1.0"

def _kotlin_version = project.hasProperty("kotlin_version") ? project.ext.kotlin_version : '1.5.20'

def _minify_enabled_debug = project.hasProperty("minify_enabled_debug") ? (project.ext.minify_enabled_debug == "true") : false
def _use_proguard_debug = project.hasProperty("use_proguard_debug") ? (project.ext.use_proguard_debug == "true") : false
def _minify_enabled = project.hasProperty("minify_enabled") ? (project.ext.minify_enabled == "true") : _minify_enabled_debug
def _use_proguard = project.hasProperty("use_proguard") ? (project.ext.use_proguard == "true") : _minify_enabled

//println "kotlin版本:" + _kotlin_version
//println project.getName()
//println project.getDisplayName()
//println project.getChildProjects()
//println rootProject.getDisplayName()
//println rootProject.getChildProjects()
//println 'all:'
//println rootProject.allprojects
//println 'sub:'
//println rootProject.subprojects
//println "........2"
//println project
//println rootProject

//classpath 'com.android.tools.build:gradle:3.2.1'
//gradle-4.6-all.zip

def childProjects = rootProject.getChildProjects()
childProjects.each {
    //println it.key
    //println it.value
    def application = "com.android.application"
    def library = "com.android.library"

    def projectObj = it.value
    def isApp = projectObj.plugins.hasPlugin(application)
    def isLib = projectObj.plugins.hasPlugin(library)

    if (isApp) {
        def applicationPlugin = projectObj.plugins.findPlugin(application)
        //自动获取 主工程的 sdk配置信息
        //println applicationPlugin.extension.defaultConfig.applicationId
        M_SDK = applicationPlugin.extension.defaultConfig.minSdkVersion.apiLevel
        T_SDK = applicationPlugin.extension.defaultConfig.targetSdkVersion.apiLevel
        C_SDK = applicationPlugin.extension.compileSdkVersion
    }
}

android {
    compileSdkVersion C_SDK

    defaultConfig {
        minSdkVersion M_SDK
        targetSdkVersion T_SDK
        versionCode V_CODE
        versionName V_NAME

        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            //minifyEnabled _minify_enabled
//            useProguard _use_proguard
            //matchingFallbacks = ['release']
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        pretest {
            //minifyEnabled _minify_enabled
//            useProguard _use_proguard
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            //minifyEnabled _minify_enabled_debug
//            useProguard _use_proguard_debug
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    def aarFolder = new File(project.rootDir.absolutePath + "/.aar")
    aarFolder.mkdirs()

    /*aar路径修改, 文件名修改*/
    libraryVariants.all { variant ->
        if (variant.buildType.name != "debug") {
            if (gradle.gradleVersion.startsWith("6")) {
                variant.getPackageLibraryProvider().get().destinationDir = aarFolder
            } else if (gradle.gradleVersion.startsWith("5")) {
                variant.packageLibrary.destinationDirectory.set(aarFolder)
            } else {
                //no op
            }
        }

        variant.outputs.all { output ->
            if (gradle.gradleVersion.startsWith("6.5") ||
                    gradle.gradleVersion.startsWith("6.7") ||
                    gradle.gradleVersion.startsWith("7")) {
                output.outputFileName = ((project.name != "app") ? project.name : rootProject.name) + "-" +
                        defaultConfig.versionName + "_" +
                        variant.buildType.name +
                        ".aar"
            } else {
                output.apkData.outputFileName = ((project.name != "app") ? project.name : rootProject.name) + "-" +
                        defaultConfig.versionName + "_" +
                        variant.buildType.name +
                        ".aar"
            }
        }
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])

    //https://jcenter.bintray.com/org/jetbrains/kotlin/kotlin-stdlib-jdk8/
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$_kotlin_version"
}

//apply from: allGradle.version
//apply from: allGradle.versionForce
//apply from: allGradle.base

apply from: 'https://gitee.com/angcyo/gradle/raw/master/versionForce.gradle'
apply from: 'https://gitee.com/angcyo/gradle/raw/master/base.gradle'

/// 构建源码jar包
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
}
task javadoc(type: Javadoc) {
    //增加编码，这行很重要，如果是windows系统，同时如果在代码中有中文的话，不加这行，上传会报错
    options.encoding = "utf-8"
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
}

def libGroupId = project.hasProperty('libGroupId') ? project.property('libGroupId') : 'com.angcyo'
def versionName = project.hasProperty('libVersionName') ? project.property('libVersionName') : '0.0.1'
def winRepo = project.hasProperty('libWinRepo') ? project.property('libWinRepo') : 'E:/AndroidProjects/maven'
def macRepo = project.hasProperty('libMacRepo') ? project.property('libMacRepo') : '/Users/angcyo/Project/Android/GithubDemo/maven'

//Executing task 'publish'...

afterEvaluate {
    publishing {

        //产物收集配置
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId = libGroupId
                artifactId = project.name
                version = versionName

                //artifact javadocJar
                artifact sourcesJar
            }
        }

        //目标仓库配置
        repositories {
            maven {
                // change to point to your repo, e.g. http://my.org/repo
                //url = 'E:/AndroidProjects/maven'//"$buildDir/repo"

                def os = System.getProperty("os.name").toLowerCase()
                def path = os.contains("window") ? winRepo : macRepo
                url = path

                System.err.println(project.name + "->本地Maven路径:${path}")
            }
        }
    }
}

//bintray {
//    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
//    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
//
//    publications = ['release']
//    configurations = ['archives']
//
//    //https://github.com/bintray/gradle-bintray-plugin#buildgradle
//    pkg {
//        repo = "maven"
//        name = "library"   //发布到JCenter上的项目名字
//        desc = 'create by angcyo.'
//        //userOrg = "angcyo"
//        websiteUrl = 'https://github.com/angcyo'
//        vcsUrl = 'https://github.com/angcyo'
//        licenses = ["MIT"]
//        publicDownloadNumbers = true
//        publish = true
//
//        /*version {
//            name = versionName
//            desc = 'library ' + versionName
//        }*/
//    }
//}