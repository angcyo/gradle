apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

def haveLibMSdk = project.hasProperty("M_SDK_LIB")
def C_SDK = 33
def M_SDK = haveLibMSdk ? project.ext.M_SDK_LIB : 21
def T_SDK = 33
def V_CODE = 1
def V_NAME = "1.0"

def _kotlin_version = project.hasProperty("kotlin_version") ? project.ext.kotlin_version : '1.8.22'

def lib_minify_enabled_debug = project.hasProperty("lib_minify_enabled_debug") ? (project.ext.lib_minify_enabled_debug == "true") : false
def lib_use_proguard_debug = project.hasProperty("lib_use_proguard_debug") ? (project.ext.lib_use_proguard_debug == "true") : false
def lib_minify_enabled = project.hasProperty("lib_minify_enabled") ? (project.ext.lib_minify_enabled == "true") : lib_minify_enabled_debug
def lib_use_proguard = project.hasProperty("lib_use_proguard") ? (project.ext.lib_use_proguard == "true") : lib_minify_enabled

//println "minSdk:" + M_SDK

//println "kotlin版本:" + _kotlin_version
//println project.getName()
//println project.getDisplayName()
//println project.getChildProjects()
//println rootProject.getDisplayName()
//println rootProject.getChildProjects()
//println 'all:'
//println rootProject.allprojects
//println 'sub:'
//println rootProject.subprojects
//println "........2"
//println project
//println rootProject

//classpath 'com.android.tools.build:gradle:3.2.1'
//gradle-4.6-all.zip

def childProjects = rootProject.getChildProjects()
childProjects.each {
    //println it.key
    //println it.value
    def application = "com.android.application"
    def library = "com.android.library"

    def projectObj = it.value
    def isApp = projectObj.plugins.hasPlugin(application)
    def isLib = projectObj.plugins.hasPlugin(library)

    if (isApp) {
        def applicationPlugin = projectObj.plugins.findPlugin(application)
        //自动获取 主工程的 sdk配置信息
        //println applicationPlugin.extension.defaultConfig.applicationId
        if (!haveLibMSdk) {
            M_SDK = applicationPlugin.extension.defaultConfig.minSdkVersion.apiLevel
        }
        T_SDK = applicationPlugin.extension.defaultConfig.targetSdkVersion.apiLevel
        C_SDK = applicationPlugin.extension.compileSdkVersion
    }
}

android {
    compileSdkVersion C_SDK

    defaultConfig {
        minSdkVersion M_SDK
        targetSdkVersion T_SDK
        versionCode V_CODE
        versionName V_NAME

        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled lib_minify_enabled_debug
            //useProguard lib_use_proguard_debug
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        pretest {
            initWith debug
            minifyEnabled lib_minify_enabled_debug
            //useProguard lib_minify_enabled_debug
            matchingFallbacks = ['debug']
        }
        release {
            initWith debug
            minifyEnabled lib_minify_enabled
            //useProguard lib_use_proguard
            debuggable false
        }
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    api fileTree(dir: 'libs', include: ['*.aar'])

    //https://jcenter.bintray.com/org/jetbrains/kotlin/kotlin-stdlib-jdk8/
    //api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$_kotlin_version"
    //api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$_kotlin_version" //2022-11-4插件会自动依赖
    //api "org.jetbrains.kotlin:kotlin-stdlib:$_kotlin_version" //2023-04-14 jdk7/8合并
}

//apply from: allGradle.version
//apply from: allGradle.versionForce
//apply from: allGradle.base
//apply from: allGradle.jar
//apply from: allGradle.publish

apply from: "$gradleHost/master/versionForce.gradle"
apply from: "$gradleHost/master/base.gradle"
//apply from: "$gradleHost/master/jar.gradle"
apply from: "$gradleHost/master/publish.gradle"
