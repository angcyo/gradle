/**
 * 2022-4-28
 * 用来改变Apk文件的输出路径和文件名
 * */

/**
 * 文件输出的文件夹(基于项目根目录的相对路径)
 * */
def output = project.hasProperty("apk_path") ? project.ext.apk_path : ".apk"

//APK输出文件名配置:(不包含扩展名)
//可用参数: #an:app名字; #vn:版本名; #d:当天日期yyyy-MM-dd; #t:当天时间yyyy-MM-dd_HH-mm; #fn:风味名; #bn:编译类型名;
//         #sn:使用的签名名称; #ka:使用的签名别名;

def apkFormatName = project.hasProperty("apkName") ? project.ext.apkName : "#an-#vn_#d_#fn_#bn_#ka"

def _app_name = project.hasProperty("APP_NAME") ? project.ext.APP_NAME : ((project.name != "app") ? project.name : rootProject.name)
def apk_time = apkTime()
def release_time = releaseTime()

def keyAlias = project.hasProperty("signConfig") ? signConfig.key_alias : ''

android {

    /*Gradle3.0 以下的方法*/
//    getApplicationVariants().all { variant ->
//        variant.outputs.each { output ->
//            def appName = "UIViewDemo-${variant.buildType.name}-${variant.versionName}"
//            def time = ""
//            if (variant.buildType.name.equalsIgnoreCase("release")) {
//                time = "_${new Date().format("yyyy-MM-dd_HH-mm")}"
//            }
//            output.outputFile = new File(output.outputFile.parent, "${appName}${time}.apk")
//        }
//    }

    //rootProject.file("/.apk")
    def apkFolder = new File(project.rootDir.absolutePath + "/" + output)
    apkFolder.mkdirs()

    def gradleVersion = gradle.gradleVersion
    println "\napk.gradle ${gradleVersion}→APK输出目录: ${apkFolder.absolutePath}"

    def gv = gradleVersion.charAt(0)

    if (gv >= '8') {
        println "ignore-->" + gradleVersion
    } else if (gradleVersion.startsWith("6.5") ||
            gradleVersion.startsWith("6.7") ||
            gradleVersion.startsWith("7") ||
            gv >= '7') {
        /*Gradle4.1 以上的方法*/
        applicationVariants.all { variant ->
            def defFolder = variant.packageApplicationProvider.get().outputDirectory.getAsFile().get()
            def defPath = defFolder.absolutePath
            println "\napk.gradle ${gradleVersion}→默认输出目录↓\n${variant.name}-> ${defPath}"

            def outputFolder = new File(apkFolder, variant.name)
            def outputName = formatApkName(apkFormatName,
                    _app_name,
                    variant.versionName,
                    apk_time,
                    variant.flavorName,
                    variant.buildType.name,
                    variant.signingConfig?.name ?: '',
                    keyAlias,
                    release_time
            )
            setAabPathProperty(variant.flavorName, variant.buildType.name, new File(outputFolder, outputName + ".aab").absolutePath)

            if (variant.buildType.name != "debug") {
                variant.packageApplicationProvider.get().outputDirectory = outputFolder
                variant.outputs.forEach {
                    it.outputFileName = outputName + ".apk"
                }
            }
        }
    } else if (gradleVersion.startsWith("6")) {
        /*Gradle4.0 以上的方法*/
        applicationVariants.all { variant ->
            def defPath = variant.packageApplicationProvider.get().outputDirectory.getAsFile().get().absolutePath
            println "\napk.gradle ${gradleVersion}→APK默认输出目录:${defPath}"

            def outputFolder = new File(apkFolder, variant.name)
            def outputName = formatApkName(apkFormatName,
                    _app_name,
                    variant.versionName,
                    apk_time,
                    variant.flavorName,
                    variant.buildType.name,
                    variant.signingConfig?.name ?: '',
                    keyAlias,
                    release_time
            )
            setAabPathProperty(variant.flavorName, variant.buildType.name, new File(outputFolder, outputName + ".aab").absolutePath)

            if (variant.buildType.name != "debug") {
                variant.packageApplicationProvider.get().outputDirectory = new File(apkFolder, variant.name)
                variant.outputs.forEach {
                    it.apkData.outputFileName = outputName + ".apk"
                }
            }
        }
    } else if (gradleVersion.startsWith("5")) {
        /*Gradle3.3 以上的方法*/
        applicationVariants.all { variant ->
            def defPath = variant.packageApplication.outputDirectory.getAsFile().get().absolutePath
            println "\napk.gradle ${gradleVersion}→APK默认输出目录:${defPath}"

            def outputFolder = new File(apkFolder, variant.name)
            def outputName = formatApkName(apkFormatName,
                    _app_name,
                    variant.versionName,
                    apk_time,
                    variant.flavorName,
                    variant.buildType.name,
                    variant.signingConfig?.name ?: '',
                    keyAlias,
                    release_time
            )
            setAabPathProperty(variant.flavorName, variant.buildType.name, new File(outputFolder, outputName + ".aab").absolutePath)

            if (variant.buildType.name != "debug") {
                variant.packageApplication.outputDirectory = new File(apkFolder, variant.name)
                variant.packageApplication.outputScope?.apkDatas?.forEach { apkData ->
                    apkData.outputFileName = outputName + ".apk"
                }
            }
        }
    } else {
        /*Gradle3.0 以上的方法*/
        applicationVariants.all { variant ->
            def defPath = variant.getPackageApplication().outputDirectory.getAsFile().get().absolutePath
            println "\napk.gradle ${gradleVersion}→APK默认输出目录:${defPath}"

            def outputFolder = new File(apkFolder, variant.name)
            def outputName = formatApkName(apkFormatName,
                    _app_name,
                    variant.versionName,
                    apk_time,
                    variant.flavorName,
                    variant.buildType.name,
                    variant.signingConfig?.name ?: '',
                    keyAlias,
                    release_time
            )
            setAabPathProperty(variant.flavorName, variant.buildType.name, new File(outputFolder, outputName + ".aab").absolutePath)

            if (variant.buildType.name != "debug") {
                //new File(project.rootDir.absolutePath + "/apk")
                variant.getPackageApplication().outputDirectory = new File(apkFolder, variant.name)
                variant.getPackageApplication().outputScope.apkDatas.forEach { apkData ->
                    apkData.outputFileName = outputName + ".apk"
                }
            }
        }
    }
}

/**设置aab输出的全路径属性*/
def setAabPathProperty(flavor, buildType, path) {
    def aabPathKey = ""

    if (flavor != null) {
        aabPathKey = "$aabPathKey${flavor}"
    }
    if (buildType != null) {
        aabPathKey = "$aabPathKey${buildType}"
    }
    aabPathKey = "${aabPathKey}AabOutputPath"
    rootProject.ext.setProperty(aabPathKey, path)
    println "设置属性:${aabPathKey} ->${getProperty(aabPathKey)}"
}

static def formatApkName(format, an, vn, t, fn, bn, sn, ka, d) {
    return format.replace("#an", an)
            .replace("#vn", vn)
            .replace("#t", t)
            .replace("#d", d)
            .replace("#fn", fn)
            .replace("#bn", bn)
            .replace("#sn", sn)
            .replace("#ka", ka)
}

//https://www.jianshu.com/p/e7a40a592f15/
//构建完成后, 将文件夹(./.apk)子目录中的apk文件, 复制到上一级
gradle.buildFinished { buildResult -> /*BuildResult*/
    copyApkFile()
    println "[apk.gradle] 构建完毕->${buildResult.action}"
}