/**
 * 阿里云 OSS文件存储 上传脚本
 * 请无视IDEA的爆红, 并不影响运行.
 * 请不要随意导入其他包.
 *
 * 脚本`apply`之后, 会在gradle窗口中的: 工程->Tasks->angcyo 中出现 `_aliyunOssUpload` 任务. 双击即可运行.
 *
 * https://github.com/angcyo/gradle
 *
 * https://help.aliyun.com/document_detail/32009.html
 *
 * Email:angcyo@126.com
 * @author angcyo* @date 2021-3-1
 * Copyright (c) 2021 ShenZhen O&M Cloud Co., Ltd. All rights reserved.
 */

/**
 * 为了保证`Key`的安全:
 * 可以在
 * win: 'C:\Users\用户名\.gradle\gradle.properties'
 * mac: '/Users/用户名/.gradle/gradle.properties'
 * linux: '/root/.gradle/gradle.properties'
 * 文件中加入配置:
 * ```
 * aliyunOssAccessKeyId=xxx
 * aliyunOssAccessKeySecret=xxx
 * aliyunOssBucketName=xxx
 * ```
 * 也可以在以下配置.(优先读取`gradle.properties`文件中的配置)
 * */
ext.aliyunOssConfig = [
        //需要上传的文件路径(多个用;分割,必须指定)
        "aliyunOssFilePath"       : "",
        //存储在oss的路径,默认就是文件名.可以指定路径比如[AccAuto/]
        "aliyunOssFileKey"        : "",

        "aliyunOssEndpoint"       : "",
        "aliyunOssBucketName"     : "",

        //是否要先执行删除文件, 需要数据删除的权限
        "aliyunOssDeleteBefore"   : "false",

        //下载域名前缀, 需要'/'结尾(在阿里云上配置的外链域名)
        "aliyunOssBaseUrl"        : "/",

        "aliyunOssAccessKeyId"    : "",
        "aliyunOssAccessKeySecret": "",

        //如果需要将url转成二维码, 参考以下链接, 注册app_id和app_secret
        //https://github.com/MZCretin/RollToolsApi#%E8%A7%A3%E9%94%81%E6%96%B0%E6%96%B9%E5%BC%8F
        "qr_api_app_id"           : "",
        "qr_api_app_secret"       : "",

        //用来保存上传成功后, APK的下载地址
        "downloadUrl"             : "",
]

buildscript {
    repositories {
        //alliyun 镜像
        maven() { url 'https://maven.aliyun.com/repository/public' }
        mavenCentral()
    }
    dependencies {
        //https://jcenter.bintray.com/com/aliyun/oss/aliyun-sdk-oss
        classpath 'com.aliyun.oss:aliyun-sdk-oss:3.12.0'
        //https://jcenter.bintray.com/com/squareup/okhttp3/
        classpath "com.squareup.okhttp3:okhttp:4.9.2"
        //https://jcenter.bintray.com/com/google/code/gson/gson/
        classpath "com.google.code.gson:gson:2.8.8"
    }
}

/**
 * 上传本地文件->阿里云Oss->返回文件下载地址
 * 拿到下载url->生成url二维码地址
 * */

task _aliyunOssUpload(group: 'angcyo', description: '上传文件到阿里云OSS') {
    doFirst {
        def accessKeyId = project.hasProperty("aliyunOssAccessKeyId") ? project.ext.aliyunOssAccessKeyId : aliyunOssConfig.aliyunOssAccessKeyId
        def accessKeySecret = project.hasProperty("aliyunOssAccessKeySecret") ? project.ext.aliyunOssAccessKeySecret : aliyunOssConfig.aliyunOssAccessKeySecret
        def endpoint = project.hasProperty("aliyunOssEndpoint") ? project.ext.aliyunOssEndpoint : aliyunOssConfig.aliyunOssEndpoint
        def bucketName = project.hasProperty("aliyunOssBucketName") ? project.ext.aliyunOssBucketName : aliyunOssConfig.aliyunOssBucketName

        def baseUrl = project.hasProperty("aliyunOssBaseUrl") ? project.ext.aliyunOssBaseUrl : aliyunOssConfig.aliyunOssBaseUrl
        def aliyunOssDeleteBefore = project.hasProperty("aliyunOssDeleteBefore") ? project.ext.aliyunOssDeleteBefore : aliyunOssConfig.aliyunOssDeleteBefore
        def deleteBefore = aliyunOssDeleteBefore == "true"

        def app_id = project.hasProperty("qr_api_app_id") ? project.ext.qr_api_app_id : aliyunOssConfig.qr_api_app_id
        def app_secret = project.hasProperty("qr_api_app_secret") ? project.ext.qr_api_app_secret : aliyunOssConfig.qr_api_app_secret
        def codeLogo = project.hasProperty("codeLogo") ? project.ext.codeLogo : null

        def fileKey = project.hasProperty("aliyunOssFileKey") ? project.ext.aliyunOssFileKey : aliyunOssConfig.aliyunOssFileKey
        def filePath = project.hasProperty("aliyunOssFilePath") ? project.ext.aliyunOssFilePath : aliyunOssConfig.aliyunOssFilePath

        if (filePath == null || filePath.isEmpty()) {
            filePath = findApkFile()
        } else {
            if (file(filePath).isDirectory()) {
                filePath = findApkFile(apkPath)
            }
        }

        if (filePath == null || filePath.isEmpty()) {
            throw new IllegalStateException("请在[gradle.properties]文件中指定需要上传的文件路径[aliyunOssFilePath=xxx]")
        }

        def allPath = filePath.split(";")
        def allKey = fileKey.split(";")

        allPath.eachWithIndex { path, index ->
            def file = file(path)
            def _filePath = file.absolutePath

            if (!file.exists()) {
                if (allPath.size() > 1) {
                    System.err.println "跳过不存在的文件:" + _filePath
                } else {
                    throw new IllegalStateException("需要上传的文件不存在:" + _filePath)
                }
            } else {
                def name = file.name
                def key = allKey[index]
                if (key.isEmpty()) key = name else key = "${key}${name}"

                def ossClient = new com.aliyun.oss.OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret)

                if (deleteBefore) {
                    //删除文件
                    try {
                        ossClient.deleteObject(bucketName, key)
                        System.err.println "删除文件:${key} 成功."
                    } catch (Exception ignored) {
                        //忽略异常
                        System.err.println "删除文件:${key} 失败."
                    }
                }

                def ossRequest = new com.aliyun.oss.model.PutObjectRequest(bucketName, key, file)
                System.err.println "\n开始上传->" + _filePath + "->" + key
                ossClient.putObject(ossRequest)
                // 关闭OSSClient。
                ossClient.shutdown()

                def downloadUrl = baseUrl + key
                System.out.println "上传完成->${downloadUrl}"
                System.out.println ""

                if (!app_id.isEmpty() && !app_secret.isEmpty()) {

                    if (codeLogo == null || codeLogo.isEmpty()) {
                        codeLogo = getLogoPath(key)
                    }

                    def qrCodeUrl = requestQrCodeUrl(app_id, app_secret, url, codeLogo)

                    System.err.println ''
                    System.err.println "二维码地址->$qrCodeUrl"
                }
            }
        }
    }
}

/**查找apk文件路径
 * [https://docs.groovy-lang.org/latest/html/groovy-jdk/java/io/File.html]*/
def findApkFile(String folderPath = null) {
    def path
    if (folderPath == null || folderPath.isEmpty()) {
        path = project.hasProperty("apk_path") ? project.ext.apk_path : ".apk"
    } else {
        path = folderPath
    }

    def folder = file(path)
    def result = null

    def isUploadFile = new File(path, ".upload") //文件是否已经上传过
    if (!isUploadFile.exists()) {
        isUploadFile.createNewFile()
    }
    def uploadFileList = []
    uploadFileList = isUploadFile.readLines('UTF8')

    def files = folder.listFiles()
    files?.each {
        if (it.isFile()) {
            def name = it.getName()
            if (name.endsWith(".apk")) {
                if (uploadFileList.contains(name)) {
                    System.out.println '已上传,跳过文件:' + name
                } else {
                    isUploadFile.append("${name}\n")
                    if (result == null) {
                        result = it.absolutePath
                    } else {
                        result = result + ";" + it.absolutePath
                    }
                }
            }
        }
    }

    return result
}

/**将内容打成二维码图片地址*/
def requestQrCodeUrl(app_id, app_secret, content, logoPath) {
    def request = qrcodeRequest(content, logoPath, app_id, app_secret)

    //生成url对应的二维码
    //https://github.com/MZCretin/RollToolsApi#%E5%85%AB%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81
    def client = new okhttp3.OkHttpClient()
    def json = client.newCall(request).execute().body().string()
    def map = new com.google.gson.Gson().fromJson(json, Map.class)
    println "接口返回:${json}"

    def qrCodeUrl = map["data"]["qrCodeUrl"]
    return qrCodeUrl
}

/**创建一个生成二维码的请求*/
def qrcodeRequest(content, logoPath, app_id, app_secret) {
    def s = URLEncoder.encode(content, "UTF-8")

    def url = ""
    def request = null

    if (logoPath == null || logoPath.isEmpty()) {
        //无logo
        url = "http://www.mxnzp.com/api/qrcode/create/single?content=${s}&size=400&type=0"

        request = new okhttp3.Request.Builder()
                .header("app_id", app_id)
                .header("app_secret", app_secret)
                .url(url)
                .build()
    } else {
        //有logo
        url = "https://www.mxnzp.com/api/qrcode/create/logo?content=${s}&size=400&type=0"

        def logoBody = okhttp3.RequestBody.create(okhttp3.MediaType.parse("multipart/form-data"), file(logoPath))

        okhttp3.RequestBody requestBody = new okhttp3.MultipartBody.Builder()
                .setType(okhttp3.MultipartBody.FORM)
                .addFormDataPart("logo_img", "codeLogo", logoBody)
                .build()

        request = new okhttp3.Request.Builder()
                .post(requestBody)
                .header("app_id", app_id)
                .header("app_secret", app_secret)
                .url(url)
                .build()
    }

    return request
}