//ext {
//    V_CODE = "1"
//    V_NAME = "1.0.1"
//    schema = "app"
//
//    application_id = "com.angcyo.app"
//}
//apply from: allGradle.app

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
//apply plugin: 'com.getkeepsafe.dexcount'
//apply from: 'build_time.gradle'

apply from: allGradle.appBase
apply from: allGradle.aar
apply from: allGradle.key

static def apkTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("Asia/Shanghai"))
}

def apk_time = apkTime()

def _C_SDK = project.hasProperty("C_SDK") ? project.ext.C_SDK : '28'
def _M_SDK = project.hasProperty("M_SDK") ? project.ext.M_SDK : '21'
def _T_SDK = project.hasProperty("T_SDK") ? project.ext.T_SDK : '28'
def _V_CODE = project.hasProperty("V_CODE") ? project.ext.V_CODE : '1'
def _V_NAME = project.hasProperty("V_NAME") ? project.ext.V_NAME : '1.0'
def application_id = project.hasProperty("application_id") ? project.ext.application_id : 'com.angcyo.app'
def _app_name = project.hasProperty("APP_NAME") ? project.ext.APP_NAME : ((project.name != "app") ? project.name : rootProject.name)

def _minify_enabled_debug = project.hasProperty("minify_enabled_debug") ? (project.ext.minify_enabled_debug == "true") : false
def _use_proguard_debug = project.hasProperty("use_proguard_debug") ? (project.ext.use_proguard_debug == "true") : false
def _minify_enabled = project.hasProperty("minify_enabled") ? (project.ext.minify_enabled == "true") : _minify_enabled_debug
def _use_proguard = project.hasProperty("use_proguard") ? (project.ext.use_proguard == "true") : _minify_enabled

println "\n........app.gradle........"
println "工程名->" + project.name + " 包名->" + application_id + " ->" + _V_NAME + "($_V_CODE)"
println "C_SDK:" + _C_SDK + " M_SDK:" + _M_SDK + " T_SDK:" + _T_SDK + " minify_enabled:" + _minify_enabled + " use_proguard:" + _use_proguard
println "........app.gradle........end"

//println hasProperty("V_NAME")
//println rootProject.hasProperty("V_NAME")
//println project
//println rootProject


//APK输出文件名配置:
//可用参数: #an:app名字; #vn:版本名; #t:当天日期; #fn:风味名; #bn:编译类型名;
//         #sn:使用的签名名称; #ka:使用的签名别名;

def apkFormatName = project.hasProperty("apkName") ? project.ext.apkName : "#an-#vn_#t_#fn_#bn_#ka.apk"

android {

    compileSdkVersion Integer.parseInt(_C_SDK)
    //buildToolsVersion rootProject.B_TOOLS
    defaultConfig {
        //vector xml支持 api < 21
        //vectorDrawables.useSupportLibrary = true

        applicationId "$application_id"
        minSdkVersion Integer.parseInt(_M_SDK)
        targetSdkVersion Integer.parseInt(_T_SDK)
        versionCode Integer.parseInt(_V_CODE)
        versionName "$_V_NAME"
        multiDexEnabled true
        resConfigs "zh", "xhdpi" //, "en"

        buildConfigField "boolean", "SHOW_DEBUG", "false"

        //可以直接使用 ${applicationId}
//        manifestPlaceholders = [
//                PACKAGE_NAME: "$application_id"
//        ]

//        ndk {
//            // 设置支持的SO库架构
//            abiFilters 'armeabi', 'armeabi-v7a', 'x86', 'x86_64'//, 'arm64-v8a'
//            //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
//        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //https://developer.android.google.cn/studio/build/multidex.html
        multiDexKeepProguard file('multidex-config.pro')

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["objectbox.incremental": "true"]
            }
        }
    }
//    sourceSets {
//        main {
//            res.srcDirs = [
//                    'src/main/res/'
//            ]
//        }
//    }

    flavorDimensions "flavor"
    productFlavors {
        //develop
        _dev {
            dimension "flavor"
            minSdkVersion Math.max(Integer.parseInt(_M_SDK), 21)
            buildConfigField "boolean", "SHOW_DEBUG", "true"
        }
        //preview
        pre {
            dimension "flavor"
            minSdkVersion Integer.parseInt(_M_SDK)
            buildConfigField "boolean", "SHOW_DEBUG", "true"
        }
        //apk
        apk {
            dimension "flavor"
            minSdkVersion Integer.parseInt(_M_SDK)
        }
    }
    buildTypes {
        release {
            //applicationIdSuffix ".release"
            initWith debug
            minifyEnabled _minify_enabled
            debuggable false
            jniDebuggable = false
            crunchPngs = true
            signingConfig signingConfigs.angcyo
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        pretest {
            //applicationIdSuffix ".release"
            initWith debug
            minifyEnabled _minify_enabled
            crunchPngs = true
            signingConfig signingConfigs.angcyo
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            //applicationIdSuffix ".debug"
            zipAlignEnabled true
            shrinkResources false
            minifyEnabled _minify_enabled_debug
//            useProguard _use_proguard_debug
            signingConfig signingConfigs.angcyo
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable true
            jniDebuggable = true
            crunchPngs = false

            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
        }
    }
    lintOptions {
        abortOnError false
        //https://www.jianshu.com/p/93678f8b3421
        disable 'GoogleAppIndexingWarning'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // For Kotlin projects https://developer.android.com/studio/write/java8-support.html
    kotlinOptions {
        jvmTarget = "1.8"
    }

    //android.packageBuildConfig = false
    //https://stackoverflow.com/questions/63072764/android-packagebuildconfig-false-is-deprecated
    buildFeatures {
        buildConfig = true
    }

    /*Gradle3.0 以下的方法*/
//    getApplicationVariants().all { variant ->
//        variant.outputs.each { output ->
//            def appName = "UIViewDemo-${variant.buildType.name}-${variant.versionName}"
//            def time = ""
//            if (variant.buildType.name.equalsIgnoreCase("release")) {
//                time = "_${new Date().format("yyyy-MM-dd_HH-mm")}"
//            }
//            output.outputFile = new File(output.outputFile.parent, "${appName}${time}.apk")
//        }
//    }

    def apkFolder = new File(project.rootDir.absolutePath + "/.apk")//rootProject.file("/.apk")
    apkFolder.mkdirs()
    println "\napp.gradle→APK输出目录:${apkFolder.absolutePath}"

    if (gradle.gradleVersion.startsWith("6.5")) {
        /*Gradle4.1 以上的方法*/
        applicationVariants.all { variant ->
            if (variant.buildType.name != "debug") {
                variant.packageApplicationProvider.get().outputDirectory = apkFolder
            }
            variant.outputs.forEach {
                it.outputFileName = formatApkName(apkFormatName,
                        _app_name,
                        variant.versionName,
                        apk_time,
                        variant.flavorName,
                        variant.buildType.name,
                        variant.signingConfig.name,
                        signConfig.key_alias
                )
            }
        }
    } else if (gradle.gradleVersion.startsWith("6")) {
        /*Gradle4.0 以上的方法*/
        applicationVariants.all { variant ->
            if (variant.buildType.name != "debug") {
                variant.packageApplicationProvider.get().outputDirectory = apkFolder
            }
            variant.outputs.forEach {
                it.apkData.outputFileName = formatApkName(apkFormatName,
                        _app_name,
                        variant.versionName,
                        apk_time,
                        variant.flavorName,
                        variant.buildType.name,
                        variant.signingConfig.name,
                        signConfig.key_alias
                )
            }
        }
    } else if (gradle.gradleVersion.startsWith("5")) {
        /*Gradle3.3 以上的方法*/
        applicationVariants.all { variant ->
            if (variant.buildType.name != "debug") {
                variant.packageApplicationProvider.get()?.outputDirectory = apkFolder
            }

            variant.packageApplicationProvider.get()?.outputScope?.apkDatas?.forEach { apkData ->
                apkData.outputFileName = formatApkName(apkFormatName,
                        _app_name,
                        variant.versionName,
                        apk_time,
                        variant.flavorName,
                        variant.buildType.name,
                        variant.signingConfig.name,
                        signConfig.key_alias
                )
            }
        }
    } else {
        /*Gradle3.0 以上的方法*/
        applicationVariants.all { variant ->
            if (variant.buildType.name != "debug") {
                //new File(project.rootDir.absolutePath + "/apk")
                variant.getPackageApplication().outputDirectory = apkFolder
            }

            variant.getPackageApplication().outputScope.apkDatas.forEach { apkData ->
                apkData.outputFileName = _formatApkName(apkFormatName,
                        _app_name,
                        variant.versionName,
                        apk_time,
                        variant.flavorName,
                        variant.buildType.name,
                        variant.signingConfig.name,
                        signConfig.key_alias
                )
            }
        }
    }
}

static def formatApkName(format, an, vn, t, fn, bn, sn, ka) {
    return format.replace("#an", an)
            .replace("#vn", vn)
            .replace("#t", t)
            .replace("#fn", fn)
            .replace("#bn", bn)
            .replace("#sn", sn)
            .replace("#ka", ka)
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(allModule.core)

    //https://stackoverflow.com/questions/51957944/android-view-viewonunhandledkeyeventlistener
    //https://github.com/DonaldDu/FixUnhandledEvent/
    debugImplementation 'com.github.DonaldDu:FixUnhandledEvent:1.0'
}

apply from: allGradle.version
apply from: allGradle.collectMR