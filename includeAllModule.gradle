ext.maxDepth = 2
ext.includeConfig = [:]
ext.ignoreModule = []

ext.autoInclude = rootProject.hasProperty('autoInclude') ? rootProject.autoInclude == "true" : true

def rootDirFile /*File*/ = getRootDir()
println "includeAllModule.gradle↓\n开始包含项目in->" + rootDirFile.getAbsolutePath()
def ignoreFile = new File(rootDirFile, '.ignore')
if (ignoreFile.exists()) {
    ignoreModule = ignoreFile.readLines('UTF8')
}
if (ignoreModule.size() > 0) {
    println "忽略以下Module->↓\n" + ignoreModule
}
listPath(rootDirFile)
//includeConfig.each { key, value ->
//    println "->include " + value + " ::" + key
//}

def gradleModuleFolder = readProperty(new File(rootDir, "gradle.properties"), 'gradleModuleFolder')
if (gradleModuleFolder != null) {
    def folderList = gradleModuleFolder.toString().split(";")
    folderList.each {
        def file = new File(it)
        if (file.exists()) {
            if (file.isDirectory()) {
                if (autoInclude) {
                    includePath(file, "")
                }
                listPath(file)
            }
        }
    }
}

println "包含以下Module->↓\n" + includeConfig
println "...end...↑\n"

/**枚举所有文件夹*/
def listPath(filePath, depth = 0 /*当前枚举的路径深度, 深度大于maxDepth停止枚举*/, parent = "") {
    //println filePath.getAbsolutePath() + " " + depth
    if (depth > maxDepth) {
        return
    }
    if (filePath.isDirectory()) {
        filePath.listFiles()?.each {
            if (it.isDirectory()) {
                if (autoInclude) {
                    includePath(it, parent)
                }
                listPath(it, depth + 1, ":" + it.getName())
            }
        }
    }
}

/**include复合目标的文件夹*/
def includePath(filePath /*File*/, parent) {
    if (filePath.isDirectory()) {
        def buildFile = new File(filePath, "build.gradle")
        def buildFileKts = new File(filePath, "build.gradle.kts")
        if (buildFile.exists() || buildFileKts.exists()) {
            def name = filePath.getName()
            def path = parent + ":${name}"

            def ignore = false
            ignoreModule.each {
                ignore = ignore || path == it || name == it || parent + ':' + it == path
            }

            if (ignore) {
                println '忽略->' + parent + ':' + path
            } else {
                //println "->include name:[${name}] path:[${path}]->$filePath"
                includeConfig[name] = path
                include path
                project(path).projectDir = filePath
                //rootProject.ext.includeConfig = includeConfig
                //rootProject.extensions.includeConfig = includeConfig
            }
        }
    }
}

/**在指定文件中, 读取属性key*/
def readProperty(file, key) {
    Properties props = new Properties()
    props.load(new FileInputStream(file))
    return props[key]
}