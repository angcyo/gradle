ext.maxDepth = 2
ext.ignoreModule = []
/**查找所有有效module*/
rootProject.ext.allModule = [:]
/**查找所有gradle文件*/
rootProject.ext.allGradle = [:]

def rootPath = getRootDir()
println "findAllModule.gradle↓\n查找所有Module->" + rootPath.getAbsolutePath()
listPath(rootPath)
//allModule.each { key, value ->
//    println "->找到 " + value + " ::" + key
//}

if (rootProject.hasProperty("gradleModuleFolder")) {
    def gradleModuleFolder = rootProject.gradleModuleFolder
    def folderList = gradleModuleFolder.toString().split(";")
    folderList.each {
        def file = new File(it)
        if (file.exists()) {
            listPath(file)
        }
    }
}

println allModule
println ""

println "所有Gradle文件->"
println allGradle
println "...end...↑\n"

/**讲项目写入忽略文件, 方便后续操作*/
writeIgnoreFile()

/**枚举所有文件夹*/
def listPath(filePath, depth = 0 /*当前枚举的路径深度, 深度大于maxDepth停止枚举*/, parent = "") {
    //println filePath.getAbsolutePath() + " " + depth
    if (depth > maxDepth) {
        return
    }

    if (filePath.isDirectory()) {
        filePath.listFiles()?.each {
            def name = it.getName()
            if (it.isDirectory()) {
                includePath(it, parent)

                listPath(it, depth + 1, ":" + name)
            } else if (it.isFile()) {
                def suffix = ".gradle"
                if (name.endsWith(suffix)) {
                    def key = name.replace(suffix, "")
                    if (allGradle[key] == null) {
                        allGradle[key] = it.getAbsolutePath()
                    } else {
                        if (key != "build") {
                            System.err.println "已设置[allGradle.${key}]脚本->${allGradle[key]}"
                        }
                    }
                }
            }
        }
    }
}

/**include符合目标的文件夹*/
def includePath(filePath, parent) {
    if (filePath.isDirectory()) {
        def buildFile = new File(filePath, "build.gradle")
        def buildFileKts = new File(filePath, "build.gradle.kts")
        if (buildFile.exists() || buildFileKts.exists()) {
            def name = filePath.getName()
            def path = parent + ":${name}"

            //println "->include " + path
            if (!isIgnoreModule(name)) {
                allModule[name] = path
                //println "追加1->" + path
            } else {
                //println "忽略1->" + path
            }

            //include path
        }
    }
}

/**当前module是否被忽略了*/
def isIgnoreModule(module) {
    if (ignoreModule.size() <= 0) {
        def rootPath = getRootDir()
        def ignoreFile = new File(rootPath, '.ignore')
        if (ignoreFile.exists()) {
            ignoreModule = ignoreFile.readLines('UTF8')
        }
    }
    def ignore = false
    ignoreModule.each {
        ignore = ignore || module == it
        //println "比较->" + it + " == " + module
    }
    return ignore
}

/**智能写入忽略到文件*/
def writeIgnoreFile() {
    def rootPath = getRootDir()
    def ignoreFile = new File(rootPath, '.ignore')
    def ignoreModule = []
    def isNewProject = !ignoreFile.exists() // 是否是新项目
    if (isNewProject) {
        ignoreFile.createNewFile()
    } else {
        ignoreModule = ignoreFile.readLines('UTF8')
    }

    def key = ''
    def haveKey = false

    def time = null
    for (module in allModule) {

        key = module.key
        haveKey = false

        ignoreModule.each {
            haveKey = haveKey || it == key || it == "#${key}"
        }

        if (!haveKey) {
            if (time == null) {
                time = new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone("Asia/Shanghai"))
                ignoreFile.append("#${time}↓\n")
            }
            if (isNewProject) {
                ignoreFile.append("#${key}\n") //新工程默认不忽略
            } else {
                ignoreFile.append("${key}\n") //新增的库, 默认忽略
            }
        } else {
            //println "跳过:${key}"
        }
    }
}